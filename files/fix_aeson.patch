From c300681edab44e35de3ee9e092fe6ee336dd6c1b Mon Sep 17 00:00:00 2001
From: Franz Thoma <franz.thoma@tngtech.com>
Date: Mon, 16 Jan 2017 08:36:13 +0100
Subject: [PATCH 1/6] Add upper version bound for aeson

---
 vgrep.cabal | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/vgrep.cabal b/vgrep.cabal
index a925ec4..263b52a 100644
--- a/vgrep.cabal
+++ b/vgrep.cabal
@@ -69,7 +69,7 @@ library
                      , Vgrep.Widget.Results.Internal
                      , Vgrep.Widget.Type
   build-depends:       base >= 4.7 && < 5
-                     , aeson              >= 0.11 || (>= 0.9 && < 0.10)
+                     , aeson              (>= 0.11 && < 1.0) || (>= 0.9 && < 0.10)
                      , async              >= 2.0.2
                      , attoparsec         >= 0.12.1.6
                      , containers         >= 0.5.6.2

From 9b5b2a4ac02d17db73b08f43e827f1b8b97dd50b Mon Sep 17 00:00:00 2001
From: Simon Jakobi <simon.jakobi@gmail.com>
Date: Mon, 16 Jan 2017 11:12:50 +0100
Subject: [PATCH 2/6] Add compatibility with aeson-1.1

---
 app/Main.hs                                  |  3 ++-
 src/Vgrep/Environment/Config.hs              | 14 +++++++-------
 src/Vgrep/Environment/Config/Monoid.hs       | 10 ++++------
 src/Vgrep/Environment/Config/Sources/File.hs |  7 ++++---
 src/Vgrep/KeybindingMap.hs                   | 10 ++++++++++
 stack.yaml                                   |  7 ++-----
 vgrep.cabal                                  |  3 ++-
 7 files changed, 31 insertions(+), 23 deletions(-)
 create mode 100644 src/Vgrep/KeybindingMap.hs

diff --git a/app/Main.hs b/app/Main.hs
index a41849c..8f96993 100644
--- a/app/Main.hs
+++ b/app/Main.hs
@@ -35,6 +35,7 @@ import           Vgrep.Command
 import           Vgrep.Environment
 import           Vgrep.Event
 import qualified Vgrep.Key                    as Key
+import           Vgrep.KeybindingMap
 import           Vgrep.Parser
 import           Vgrep.System.Grep
 import           Vgrep.Text
@@ -178,7 +179,7 @@ handleKeyEvent chord environment state =
     localBindings = case view (widgetState . currentWidget) state of
         Left  _ -> resultsBindings
         Right _ -> pagerBindings
-    lookupCmd = fromMaybe Unset . M.lookup chord
+    lookupCmd = fromMaybe Unset . M.lookup chord . unKeybindingMap
     command = case lookupCmd localBindings of
         Unset   -> lookupCmd globalBindings
         defined -> defined
diff --git a/src/Vgrep/Environment/Config.hs b/src/Vgrep/Environment/Config.hs
index 6457d30..c76387d 100644
--- a/src/Vgrep/Environment/Config.hs
+++ b/src/Vgrep/Environment/Config.hs
@@ -4,7 +4,6 @@ module Vgrep.Environment.Config where
 
 import           Control.Lens.Compat
 import           Control.Monad.IO.Class
-import           Data.Map.Strict        (Map)
 import qualified Data.Map.Strict        as M
 import           Data.Maybe
 import           Data.Monoid
@@ -24,6 +23,7 @@ import           Vgrep.Command
 import           Vgrep.Environment.Config.Monoid
 import           Vgrep.Environment.Config.Sources
 import qualified Vgrep.Key                        as Key
+import           Vgrep.KeybindingMap
 
 
 --------------------------------------------------------------------------
@@ -68,13 +68,13 @@ data Colors = Colors
     } deriving (Eq, Show)
 
 data Keybindings = Keybindings
-    { _resultsKeybindings :: Map Key.Chord Command
+    { _resultsKeybindings :: KeybindingMap
     -- ^ Keybindings in effect when results list is focused.
 
-    , _pagerKeybindings   :: Map Key.Chord Command
+    , _pagerKeybindings   :: KeybindingMap
     -- ^ Keybindings in effect when pager is focused.
 
-    , _globalKeybindings  :: Map Key.Chord Command
+    , _globalKeybindings  :: KeybindingMap
     -- ^ Global keybindings are in effect both for pager and results list, but
     -- can be overridden by either one.
 
@@ -146,7 +146,7 @@ defaultColors = Colors
 
 defaultKeybindings :: Keybindings
 defaultKeybindings = Keybindings
-    { _resultsKeybindings = M.fromList
+    { _resultsKeybindings = KeybindingMap $ M.fromList
         [ (Key.key Key.Up,          ResultsUp)
         , (Key.key Key.Down,        ResultsDown)
         , (Key.key Key.PageUp,      ResultsPageUp)
@@ -156,7 +156,7 @@ defaultKeybindings = Keybindings
         , (Key.key (Key.Char 'j'),  ResultsDown)
         , (Key.key (Key.Char 'f'),  DisplayResultsOnly)
         , (Key.key Key.Tab,         SplitFocusPager) ]
-    , _pagerKeybindings = M.fromList
+    , _pagerKeybindings = KeybindingMap $ M.fromList
         [ (Key.key Key.Up,          PagerUp)
         , (Key.key Key.Down,        PagerDown)
         , (Key.key Key.PageUp,      PagerPageUp)
@@ -170,7 +170,7 @@ defaultKeybindings = Keybindings
         , (Key.key (Key.Char 'f'),  DisplayPagerOnly)
         , (Key.key Key.Tab,         SplitFocusResults)
         , (Key.key (Key.Char 'q'),  DisplayResultsOnly) ]
-    , _globalKeybindings = M.fromList
+    , _globalKeybindings = KeybindingMap $ M.fromList
         [ (Key.key (Key.Char 'e'),  OpenFileInEditor)
         , (Key.key (Key.Char 'q'),  Exit) ]
     }
diff --git a/src/Vgrep/Environment/Config/Monoid.hs b/src/Vgrep/Environment/Config/Monoid.hs
index 9bc310b..a7547c0 100644
--- a/src/Vgrep/Environment/Config/Monoid.hs
+++ b/src/Vgrep/Environment/Config/Monoid.hs
@@ -5,14 +5,12 @@ module Vgrep.Environment.Config.Monoid
   , KeybindingsMonoid (..)
   ) where
 
-import Data.Map.Strict          (Map)
 import Data.Monoid
 import Generics.Deriving.Monoid (mappenddefault, memptydefault)
 import GHC.Generics
 import Graphics.Vty.Attributes  (Attr)
 
-import           Vgrep.Command
-import qualified Vgrep.Key     as Key
+import Vgrep.KeybindingMap
 
 -- $setup
 -- >>> import Data.Map.Strict
@@ -86,9 +84,9 @@ instance Monoid ColorsMonoid where
 -- otherwise they are simply added. To remove a keybinding, it has to be mapped
 -- to 'Unset' explicitly.
 data KeybindingsMonoid = KeybindingsMonoid
-    { _mresultsKeybindings :: Maybe (Map Key.Chord Command)
-    , _mpagerKeybindings   :: Maybe (Map Key.Chord Command)
-    , _mglobalKeybindings  :: Maybe (Map Key.Chord Command)
+    { _mresultsKeybindings :: Maybe KeybindingMap
+    , _mpagerKeybindings   :: Maybe KeybindingMap
+    , _mglobalKeybindings  :: Maybe KeybindingMap
     } deriving (Eq, Show, Generic)
 
 instance Monoid KeybindingsMonoid where
diff --git a/src/Vgrep/Environment/Config/Sources/File.hs b/src/Vgrep/Environment/Config/Sources/File.hs
index ddc5059..087df88 100644
--- a/src/Vgrep/Environment/Config/Sources/File.hs
+++ b/src/Vgrep/Environment/Config/Sources/File.hs
@@ -12,7 +12,7 @@ module Vgrep.Environment.Config.Sources.File
     , Style
     ) where
 
-import           Control.Monad           ((>=>))
+import           Control.Monad           ((<=<))
 import           Control.Monad.IO.Class
 import           Data.Aeson.Types
     ( Options (..)
@@ -35,6 +35,7 @@ import           Text.Read               (readMaybe)
 import           Vgrep.Command
 import           Vgrep.Environment.Config.Monoid
 import qualified Vgrep.Key                       as Key
+import           Vgrep.KeybindingMap
 
 -- $setup
 -- >>> import Data.List (isInfixOf)
@@ -311,8 +312,8 @@ instance FromJSON KeybindingsMonoid where
 instance FromJSON Command where
     parseJSON = genericParseJSON jsonOptions
 
-instance FromJSON (Map Key.Chord Command) where
-    parseJSON = parseJSON >=> mapMKeys parseChord
+instance FromJSON (KeybindingMap) where
+    parseJSON = fmap KeybindingMap . mapMKeys parseChord <=< parseJSON
 
 mapMKeys :: (Monad m, Ord k') => (k -> m k') -> Map k v -> m (Map k' v)
 mapMKeys f = fmap M.fromList . M.foldrWithKey go (pure [])
diff --git a/src/Vgrep/KeybindingMap.hs b/src/Vgrep/KeybindingMap.hs
new file mode 100644
index 0000000..8c009ad
--- /dev/null
+++ b/src/Vgrep/KeybindingMap.hs
@@ -0,0 +1,10 @@
+{-# LANGUAGE GeneralizedNewtypeDeriving #-}
+module Vgrep.KeybindingMap where
+
+import           Data.Map.Strict (Map)
+import           Vgrep.Command
+import qualified Vgrep.Key       as Key
+
+
+newtype KeybindingMap = KeybindingMap { unKeybindingMap :: Map Key.Chord Command }
+  deriving (Show, Eq, Monoid)
diff --git a/stack.yaml b/stack.yaml
index 28f440d..0348d97 100644
--- a/stack.yaml
+++ b/stack.yaml
@@ -1,7 +1,7 @@
 # For more information, see: https://github.com/commercialhaskell/stack/blob/release/doc/yaml_configuration.md
 
 # Specifies the GHC version and set of packages available (e.g., lts-3.5, nightly-2015-09-21, ghc-7.10.2)
-resolver: lts-5.0
+resolver: nightly-2017-01-14
 
 # Local packages, usually specified by relative directory name
 packages:
@@ -9,10 +9,7 @@ packages:
 
 # Packages to be pulled from upstream that are not in the resolver (e.g., acme-missiles-0.3)
 extra-deps:
-  # We want a recent version of stylish-haskell.
-  # This is olny for tooling, so does not affect
-  # dependency management.
-  - stylish-haskell-0.6.1.0
+- aeson-1.1.0.0
 
 # Override default flag values for local packages and extra-deps
 flags: {}
diff --git a/vgrep.cabal b/vgrep.cabal
index 263b52a..3d54e32 100644
--- a/vgrep.cabal
+++ b/vgrep.cabal
@@ -55,6 +55,7 @@ library
                      , Vgrep.Environment.Config.Sources.File
                      , Vgrep.Event
                      , Vgrep.Key
+                     , Vgrep.KeybindingMap
                      , Vgrep.Parser
                      , Vgrep.Results
                      , Vgrep.System.Grep
@@ -69,7 +70,7 @@ library
                      , Vgrep.Widget.Results.Internal
                      , Vgrep.Widget.Type
   build-depends:       base >= 4.7 && < 5
-                     , aeson              (>= 0.11 && < 1.0) || (>= 0.9 && < 0.10)
+                     , aeson              (>= 0.11 && < 1.2) || (>= 0.9 && < 0.10)
                      , async              >= 2.0.2
                      , attoparsec         >= 0.12.1.6
                      , containers         >= 0.5.6.2

From 7cfe7c94cfaf5085c01a663a75cf01a802fd15dd Mon Sep 17 00:00:00 2001
From: Simon Jakobi <simon.jakobi@gmail.com>
Date: Mon, 16 Jan 2017 11:44:49 +0100
Subject: [PATCH 3/6] Fix Travis: --resolver doesn't override extra-deps

---
 stack.yaml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/stack.yaml b/stack.yaml
index 0348d97..c60b29c 100644
--- a/stack.yaml
+++ b/stack.yaml
@@ -8,8 +8,7 @@ packages:
 - '.'
 
 # Packages to be pulled from upstream that are not in the resolver (e.g., acme-missiles-0.3)
-extra-deps:
-- aeson-1.1.0.0
+extra-deps: []
 
 # Override default flag values for local packages and extra-deps
 flags: {}

From e8c044f0e3c2bbb783a8020cb3871b041cca5a9a Mon Sep 17 00:00:00 2001
From: Simon Jakobi <simon.jakobi@gmail.com>
Date: Mon, 16 Jan 2017 11:45:02 +0100
Subject: [PATCH 4/6] Apply hlint

---
 src/Vgrep/Environment/Config/Sources/File.hs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Vgrep/Environment/Config/Sources/File.hs b/src/Vgrep/Environment/Config/Sources/File.hs
index 087df88..c36f7e1 100644
--- a/src/Vgrep/Environment/Config/Sources/File.hs
+++ b/src/Vgrep/Environment/Config/Sources/File.hs
@@ -312,7 +312,7 @@ instance FromJSON KeybindingsMonoid where
 instance FromJSON Command where
     parseJSON = genericParseJSON jsonOptions
 
-instance FromJSON (KeybindingMap) where
+instance FromJSON KeybindingMap where
     parseJSON = fmap KeybindingMap . mapMKeys parseChord <=< parseJSON
 
 mapMKeys :: (Monad m, Ord k') => (k -> m k') -> Map k v -> m (Map k' v)

From 7409b44d7bd6ac3ffaa107a19b77ee6c343b220f Mon Sep 17 00:00:00 2001
From: Simon Jakobi <simon.jakobi@gmail.com>
Date: Mon, 16 Jan 2017 12:10:40 +0100
Subject: [PATCH 5/6] Fix doctests

---
 src/Vgrep/Environment/Config/Monoid.hs | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/src/Vgrep/Environment/Config/Monoid.hs b/src/Vgrep/Environment/Config/Monoid.hs
index a7547c0..4837e9f 100644
--- a/src/Vgrep/Environment/Config/Monoid.hs
+++ b/src/Vgrep/Environment/Config/Monoid.hs
@@ -14,6 +14,8 @@ import Vgrep.KeybindingMap
 
 -- $setup
 -- >>> import Data.Map.Strict
+-- >>> import Vgrep.Command
+-- >>> import qualified Vgrep.Key as Key
 
 -- | A 'Monoid' for reading partial configs. The 'ConfigMonoid' can be converted
 -- to an actual 'Vgrep.Environment.Config.Config' using
@@ -66,18 +68,18 @@ instance Monoid ColorsMonoid where
 --
 -- Mappings are combined using left-biased 'Data.Map.Strict.union':
 --
--- >>> let l = Just (fromList [(Key.Chord mempty Key.Down, ResultsDown), (Key.Chord mempty Key.Up, ResultsUp)])
--- >>> let r = Just (fromList [(Key.Chord mempty Key.Down, PagerDown)])
+-- >>> let l = Just (KeybindingMap (fromList [(Key.Chord mempty Key.Down, ResultsDown), (Key.Chord mempty Key.Up, ResultsUp)]))
+-- >>> let r = Just (KeybindingMap (fromList [(Key.Chord mempty Key.Down, PagerDown)]))
 -- >>> l <> r
--- Just (fromList [(Chord (fromList []) Up,ResultsUp),(Chord (fromList []) Down,ResultsDown)])
+-- Just (KeybindingMap {unKeybindingMap = fromList [(Chord (fromList []) Up,ResultsUp),(Chord (fromList []) Down,ResultsDown)]})
 -- >>> r <> l
--- Just (fromList [(Chord (fromList []) Up,ResultsUp),(Chord (fromList []) Down,PagerDown)])
+-- Just (KeybindingMap {unKeybindingMap = fromList [(Chord (fromList []) Up,ResultsUp),(Chord (fromList []) Down,PagerDown)]})
 --
 -- In particular, @'Just' ('Data.Map.Strict.fromList' [])@ (declaring an empty
 -- list of mappings) and @'Nothing'@ (not declaring anything) are equivalent,
 -- given that there are already default mappings:
 --
--- >>> l <> Just (fromList []) == l <> Nothing
+-- >>> l <> Just (KeybindingMap (fromList [])) == l <> Nothing
 -- True
 --
 -- This means that new keybindings override the previous ones if they collide,

From ad3596554c0c449a2a2070b545ff3d67deab2ab8 Mon Sep 17 00:00:00 2001
From: Simon Jakobi <simon.jakobi@gmail.com>
Date: Mon, 23 Jan 2017 15:38:16 +0100
Subject: [PATCH 6/6] Address review comments

---
 .travis.yml                            |  1 -
 app/Main.hs                            |  5 ++---
 src/Vgrep/Environment/Config.hs        | 10 +++++-----
 src/Vgrep/Environment/Config/Monoid.hs |  2 +-
 src/Vgrep/KeybindingMap.hs             |  7 +++++++
 stack.yaml                             |  8 ++++++--
 6 files changed, 21 insertions(+), 12 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index e4a171e..6329057 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -23,7 +23,6 @@ matrix:
         - env: ARGS="--resolver lts-6"
         - env: ARGS="--resolver lts-7"
         - env: ARGS="--resolver lts"
-    allow_failures:
         - env: ARGS="--resolver nightly"
 
 before_install:
diff --git a/app/Main.hs b/app/Main.hs
index 8f96993..a3f1a12 100644
--- a/app/Main.hs
+++ b/app/Main.hs
@@ -6,7 +6,6 @@ module Main (main) where
 import           Control.Concurrent.Async
 import           Control.Lens.Compat
 import           Control.Monad.Reader
-import qualified Data.Map.Strict                    as M
 import           Data.Maybe
 import           Data.Monoid
 import           Data.Ratio
@@ -35,7 +34,7 @@ import           Vgrep.Command
 import           Vgrep.Environment
 import           Vgrep.Event
 import qualified Vgrep.Key                    as Key
-import           Vgrep.KeybindingMap
+import qualified Vgrep.KeybindingMap          as KeybindingMap
 import           Vgrep.Parser
 import           Vgrep.System.Grep
 import           Vgrep.Text
@@ -179,7 +178,7 @@ handleKeyEvent chord environment state =
     localBindings = case view (widgetState . currentWidget) state of
         Left  _ -> resultsBindings
         Right _ -> pagerBindings
-    lookupCmd = fromMaybe Unset . M.lookup chord . unKeybindingMap
+    lookupCmd = fromMaybe Unset . KeybindingMap.lookup chord
     command = case lookupCmd localBindings of
         Unset   -> lookupCmd globalBindings
         defined -> defined
diff --git a/src/Vgrep/Environment/Config.hs b/src/Vgrep/Environment/Config.hs
index c76387d..4199245 100644
--- a/src/Vgrep/Environment/Config.hs
+++ b/src/Vgrep/Environment/Config.hs
@@ -4,7 +4,6 @@ module Vgrep.Environment.Config where
 
 import           Control.Lens.Compat
 import           Control.Monad.IO.Class
-import qualified Data.Map.Strict        as M
 import           Data.Maybe
 import           Data.Monoid
 import           Graphics.Vty.Image
@@ -23,7 +22,8 @@ import           Vgrep.Command
 import           Vgrep.Environment.Config.Monoid
 import           Vgrep.Environment.Config.Sources
 import qualified Vgrep.Key                        as Key
-import           Vgrep.KeybindingMap
+import           Vgrep.KeybindingMap              (KeybindingMap (..))
+import qualified Vgrep.KeybindingMap              as KeybindingMap
 
 
 --------------------------------------------------------------------------
@@ -146,7 +146,7 @@ defaultColors = Colors
 
 defaultKeybindings :: Keybindings
 defaultKeybindings = Keybindings
-    { _resultsKeybindings = KeybindingMap $ M.fromList
+    { _resultsKeybindings = KeybindingMap.fromList
         [ (Key.key Key.Up,          ResultsUp)
         , (Key.key Key.Down,        ResultsDown)
         , (Key.key Key.PageUp,      ResultsPageUp)
@@ -156,7 +156,7 @@ defaultKeybindings = Keybindings
         , (Key.key (Key.Char 'j'),  ResultsDown)
         , (Key.key (Key.Char 'f'),  DisplayResultsOnly)
         , (Key.key Key.Tab,         SplitFocusPager) ]
-    , _pagerKeybindings = KeybindingMap $ M.fromList
+    , _pagerKeybindings = KeybindingMap.fromList
         [ (Key.key Key.Up,          PagerUp)
         , (Key.key Key.Down,        PagerDown)
         , (Key.key Key.PageUp,      PagerPageUp)
@@ -170,7 +170,7 @@ defaultKeybindings = Keybindings
         , (Key.key (Key.Char 'f'),  DisplayPagerOnly)
         , (Key.key Key.Tab,         SplitFocusResults)
         , (Key.key (Key.Char 'q'),  DisplayResultsOnly) ]
-    , _globalKeybindings = KeybindingMap $ M.fromList
+    , _globalKeybindings = KeybindingMap.fromList
         [ (Key.key (Key.Char 'e'),  OpenFileInEditor)
         , (Key.key (Key.Char 'q'),  Exit) ]
     }
diff --git a/src/Vgrep/Environment/Config/Monoid.hs b/src/Vgrep/Environment/Config/Monoid.hs
index 4837e9f..9fdb359 100644
--- a/src/Vgrep/Environment/Config/Monoid.hs
+++ b/src/Vgrep/Environment/Config/Monoid.hs
@@ -10,7 +10,7 @@ import Generics.Deriving.Monoid (mappenddefault, memptydefault)
 import GHC.Generics
 import Graphics.Vty.Attributes  (Attr)
 
-import Vgrep.KeybindingMap
+import Vgrep.KeybindingMap (KeybindingMap (..))
 
 -- $setup
 -- >>> import Data.Map.Strict
diff --git a/src/Vgrep/KeybindingMap.hs b/src/Vgrep/KeybindingMap.hs
index 8c009ad..2cbc34d 100644
--- a/src/Vgrep/KeybindingMap.hs
+++ b/src/Vgrep/KeybindingMap.hs
@@ -2,9 +2,16 @@
 module Vgrep.KeybindingMap where
 
 import           Data.Map.Strict (Map)
+import qualified Data.Map.Strict as M
 import           Vgrep.Command
 import qualified Vgrep.Key       as Key
 
 
 newtype KeybindingMap = KeybindingMap { unKeybindingMap :: Map Key.Chord Command }
   deriving (Show, Eq, Monoid)
+
+lookup :: Key.Chord -> KeybindingMap -> Maybe Command
+lookup chord (KeybindingMap m) = M.lookup chord m
+
+fromList :: [(Key.Chord, Command)] -> KeybindingMap
+fromList = KeybindingMap . M.fromList
diff --git a/stack.yaml b/stack.yaml
index c60b29c..28f440d 100644
--- a/stack.yaml
+++ b/stack.yaml
@@ -1,14 +1,18 @@
 # For more information, see: https://github.com/commercialhaskell/stack/blob/release/doc/yaml_configuration.md
 
 # Specifies the GHC version and set of packages available (e.g., lts-3.5, nightly-2015-09-21, ghc-7.10.2)
-resolver: nightly-2017-01-14
+resolver: lts-5.0
 
 # Local packages, usually specified by relative directory name
 packages:
 - '.'
 
 # Packages to be pulled from upstream that are not in the resolver (e.g., acme-missiles-0.3)
-extra-deps: []
+extra-deps:
+  # We want a recent version of stylish-haskell.
+  # This is olny for tooling, so does not affect
+  # dependency management.
+  - stylish-haskell-0.6.1.0
 
 # Override default flag values for local packages and extra-deps
 flags: {}
